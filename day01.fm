puzzle_input := read_file('input_1.txt');

part_one := puzzle_input
	then lines
	filter (\v -> v then chars then len != 0)
	map (\v -> v search '(\d)' map atoi)
	map (\l -> [l then first, l then last])
	map (\l -> l(0) * 10 + l(1))
	fold +;

part_two := puzzle_input
	then lines
	filter (\v -> v then chars then len != 0)
	map (\v -> v search '(\d|oneight|twone|threeight|fiveight|sevenine|eightwo|eighthree|nineight|one|two|three|four|five|six|seven|eight|nine)')
	map (\v -> [v then first, v then last])
	map (\v -> v flat_map (\n -> (
		if (n == 'oneight') (
			['1', '8']
		) else if (n == 'twone') (
			['2', '1']
		) else if (n == 'threeight') (
			['3', '8']
		) else if (n == 'fiveight') (
			['5', '8']
		) else if (n == 'sevenine') (
			['7', '9']
		) else if (n == 'eightwo') (
			['8', '2']
		) else if (n == 'eighthree') (
			['8', '3']
		) else if (n == 'nineight') (
			['9', '8']
		) else if (n == 'one') (
			['1']
		) else if (n == 'two') (
			['2']
		) else if (n == 'three') (
			['3']
		) else if (n == 'four') (
			['4']
		) else if (n == 'five') (
			['5']
		) else if (n == 'six') (
			['6']
		) else if (n == 'seven') (
			['7']
		) else if (n == 'eight') (
			['8']
		) else if (n == 'nine') (
			['9']
		) else (
			[n]
		) map atoi
	)))
	map (\v -> [v then first, v then last])
	map (\v -> v(0) * 10 + v(1))
	fold +;

[part_one, part_two]
