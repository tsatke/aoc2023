import "prelude.noul";

puzzle_input := read_input();

# part 1
puzzle_input.lines
	map (\v -> v search_all R"\d" map int)
	map (\v -> [first v, last v])
	map (\v -> v[0] * 10 + v[1])
	fold +
	then print;

# part 2
puzzle_input.lines
	map (\v -> v search_all R"(\d|oneight|twone|threeight|fiveight|sevenine|eightwo|eighthree|nineight|one|two|three|four|five|six|seven|eight|nine)" map first)
	map flat_map (\v -> switch (v)
		case "oneight" -> ["1", "8"]
		case "twone" -> ["2", "1"]
		case "threeight" -> ["3", "8"]
		case "fiveight" -> ["5", "8"]
		case "sevenine" -> ["7", "9"]
		case "eightwo" -> ["8", "2"]
		case "eighthree" -> ["8", "3"]
		case "nineight" -> ["9", "8"]
		case "one" -> "1"
		case "two" -> "2"
		case "three" -> "3"
		case "four" -> "4"
		case "five" -> "5"
		case "six" -> "6"
		case "seven" -> "7"
		case "eight" -> "8"
		case "nine" -> "9"
		case i -> i
	)
	map (\v -> [first v, last v])
	map map (\v -> int(v))
	map (\v -> v[0] * 10 + v[1])
	fold +
	then print;
